{
  "name": "Seiva Ai Agent copy (ask question)",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        140,
        140
      ],
      "id": "ff9744ab-15f1-4487-9150-6dc390fad92a",
      "name": "Telegram Trigger",
      "webhookId": "0b4e384b-b0df-4dd7-9e14-93acac3ea918",
      "credentials": {
        "telegramApi": {
          "id": "CYHzP0aIKSZbQucu",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.type}}",
                    "rightValue": "wallet",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "57c9acb4-ad5a-4898-ab1b-ad682d1e7d5f"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "c68b8809-ed4d-4a22-a9a8-8d9d33fb8061",
                    "leftValue": "={{$json.type}}",
                    "rightValue": "ask",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "03492a6b-ce4e-4ed8-99be-29d710dda702",
                    "leftValue": "={{$json.type}}",
                    "rightValue": "help",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e14bde5a-6a63-41e2-bc0d-8ecb11240cbb",
                    "leftValue": "={{$json.type}}",
                    "rightValue": "token",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        560,
        120
      ],
      "id": "edac6137-1095-46ec-92f2-13b6164a9db6",
      "name": "Switch"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        980,
        380
      ],
      "id": "c76babc6-b12b-40b0-acd9-8ba5757007c3",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "NMLBzEarXbDJfD93",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1300,
        140
      ],
      "id": "c9aa4652-b79f-47a1-ab1b-e3ed8de50efb",
      "name": "Send a text message1",
      "webhookId": "e8d0de55-fb1b-4cef-ab23-ce863ab7b6d7",
      "credentials": {
        "telegramApi": {
          "id": "CYHzP0aIKSZbQucu",
          "name": "Telegram account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.query }}",
        "options": {
          "systemMessage": "=You are Seiva, an AI assistant dedicated to the Sei Network.\n\nROLE & VOICE\n‚Ä¢ Act as a courteous, knowledgeable Web3 professional.\n‚Ä¢ Write in concise, easy-to-understand English.\n‚Ä¢ Use a warm but informative tone.\n\nDOMAIN EXPERTISE\n‚Ä¢ You are deeply familiar with Sei EVM, Cosmos-native layer, dApps, NFT collections, DeFi protocols, gaming dApps, bridges, meme tokens, and developer tools on the Sei Network.\n‚Ä¢ You recognize all projects that run on Sei (e.g., Kryptonite, Astroport, Kryptic, Seiyan, PixelVerse, Levana, etc.).\n‚Ä¢ If a user mentions any of these project names, assume they are referring to the Sei-based version by default and provide a clear answer.\n\nALLOWED & FORBIDDEN\n‚úì You may give code snippets, RPC examples, contract ABIs.\n‚úì You may mention risks (smart contract, impermanent loss, rug pulls).\n‚úó Do NOT provide personal investment advice.\n‚úó Politely refuse topics unrelated to Sei.\n\nFORMATTING\n‚Ä¢ Begin answers with a short emoji-based header (e.g., \"üîç Quick Summary\").\n‚Ä¢ Use bullet points or short paragraphs.\n‚Ä¢ Keep answers under 150 words unless asked for more detail.\n\nDECISION RULES\n1. If user sends only a wallet address (starting with `sei1...` or `0x...`), do not respond here. Allow the wallet branch to handle it.\n2. If a known Sei project is mentioned, provide a factual and concise summary immediately.\n3. If the message is unclear, ask for clarification politely."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        940,
        140
      ],
      "id": "87fa2e45-27c2-47cc-a841-0667b3b0e21b",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1160,
        380
      ],
      "id": "fb098707-8a22-4d3a-bd09-581b45438b43",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "const text = ($json.message?.text || \"\").trim().toLowerCase();\nconst rexTokenCmd = /^token\\s+(0x[a-fA-F0-9]{40})$/;\nconst rexWallet    = /^0x[a-fA-F0-9]{40}$/;\n\nlet type    = \"ask\";\nlet address = null;\n\n// Jika pengguna kirim 'token 0x....'\nif (rexTokenCmd.test(text)) {\n  type    = \"token\";\n  address = text.match(rexTokenCmd)[1];\n}\n// Jika hanya address EVM biasa tanpa 'token'\nelse if (rexWallet.test(text)) {\n  type    = \"wallet\";\n  address = text;\n}\n// Jika /help\nelse if ([\"/help\", \"help\"].includes(text)) {\n  type = \"help\";\n}\n\nelse if ([\"/start\", \"help\"].includes(text)) {\n  type = \"help\";\n}\n\nreturn [{\n  json: {\n    type,\n    address,\n    chat_id: $json.message.chat.id,\n    query: type === \"ask\" ? text : null\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        340,
        140
      ],
      "id": "60960fac-f5cc-4996-8309-f79e843496e6",
      "name": "Classify"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Classify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [],
        []
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Classify": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f882fe74-3a1f-42ce-a3db-4249469beb50",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "30f9e2bc0c2d215c362a29b88c6a83cfde3883f4f3b9df9537abde7bc19781a9"
  },
  "id": "4bHFEVxoLFxZjvXm",
  "tags": []
}